{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Koto",
  "scopeName": "source.koto",
  "patterns": [
    {
      "include": "#all"
    }
  ],
  "repository": {
    "all": {
      "patterns": [
        {
          "include": "#comment-block"
        },
        {
          "name": "keyword.comment.line.koto",
          "match": "#.*"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#number"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#section"
        },
        {
          "include": "#let"
        },
        {
          "include": "#function"
        },
        {
          "include": "#identifier"
        },
        {
          "include": "#string"
        }
      ]
    },
    "comment-block": {
      "name": "comment.block.koto",
      "begin": "#-",
      "end": "-#",
      "patterns": [
        {
          "name": "constant.character.escape.koto",
          "match": "\\\\."
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "name": "entity.name.function.koto",
          "match": "\\b(?!\\.\\.)(?<=\\.)([[:alpha:]_][[:alnum:]_]*)\\b"
        },
        {
          "match": "([[:alpha:]_][[:alnum:]_]*)((:)\\s*([[:alpha:]_][[:alnum:]_]*\\??))?\\b",
          "captures": {
            "1": {
              "name": "entitity.name.koto"
            },
            "3": {
              "name": "punctuation.separator.koto"
            },
            "4": {
              "name": "storage.type.koto"
            }
          }
        },
        {
          "match": "(@[[:alpha:]_][[:alnum:]_]*)(\\s*[[:alpha:]_][[:alnum:]_]*)?\\s*(:|=)",
          "captures": {
            "1": {
              "name": "entity.name.class.koto"
            },
            "2": {
              "name": "entity.name.function.koto"
            },
            "3": {
              "name": "punctuation.separator.koto"
            }
          }
        },
        {
          "name": "entity.name.class.koto",
          "match": "(@[[:alpha:]_][[:alnum:]_]*)"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "constant.language.koto",
          "match": "\\b(false|true|null)\\b"
        },
        {
          "name": "constant.language.self.koto",
          "match": "\\b(self)\\b"
        },
        {
          "name": "support.function.koto",
          "match": "\\b(assert|assert_eq|assert_ne|assert_near)\\b"
        },
        {
          "name": "keyword.control.koto",
          "match": "\\b(catch|finally|for|in|loop|return|throw|try|until|while|yield)\\b"
        },
        {
          "name": "keyword.control.conditional.koto",
          "match": "\\b(else|if|match|switch|then)\\b"
        },
        {
          "name": "keyword.control.import.koto",
          "match": "\\b(export|from|import|as)\\b"
        },
        {
          "name": "keyword.other",
          "match": "\\b(debug)\\b"
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.koto",
          "match": "\\b-?[0-9]+\\b"
        },
        {
          "name": "constant.numeric.koto",
          "match": "\\b-?[0-9]+.?[0-9]+(e[-+]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.koto",
          "match": "\\b-?0b[01]+\\b"
        },
        {
          "name": "constant.numeric.koto",
          "match": "\\b-?0o[0-7]+\\b"
        },
        {
          "name": "constant.numeric.koto",
          "match": "\\b-?0x[0-9a-fA-F]+\\b"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.koto",
          "match": "\\b(and|not|or)\\b"
        },
        {
          "name": "keyword.operator.koto",
          "match": "\\+|-|%|\\*|\\/"
        },
        {
          "name": "keyword.operator.koto",
          "match": "\\+=|-=|\\*=|/=|%="
        },
        {
          "name": "keyword.operator.koto",
          "match": "==?|<=?|>=?"
        },
        {
          "name": "keyword.operator.koto",
          "match": "->|\\?"
        },
        {
          "name": "keyword.operator.koto",
          "match": "\\.\\.=?"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.brackets.round.koto",
          "match": "\\(|\\)"
        },
        {
          "name": "punctuation.dot.koto",
          "match": "\\."
        },
        {
          "name": "punctuation.comma.koto",
          "match": ","
        }
      ]
    },
    "section": {
      "patterns": [
        {
          "name": "punctuation.brackets.curly.koto",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "#all"
            }
          ]
        },
        {
          "name": "punctuation.brackets.square.koto",
          "begin": "\\[",
          "end": "]",
          "patterns": [
            {
              "include": "#all"
            }
          ]
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "include": "#string-single-quoted"
        },
        {
          "include": "#string-double-quoted"
        },
        {
          "include": "#string-raw"
        }
      ]
    },
    "string-single-quoted": {
      "name": "string.quoted.single.koto",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "include": "#string-escape"
        },
        {
          "include": "#string-template"
        }
      ]
    },
    "string-double-quoted": {
      "name": "string.quoted.double.koto",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "include": "#string-escape"
        },
        {
          "include": "#string-template"
        }
      ]
    },
    "string-escape": {
      "patterns": [
        {
          "name": "constant.character.escape.koto",
          "match": "\\\\['rnt$\"\\\\]"
        },
        {
          "name": "constant.character.escape.koto",
          "match": "\\\\x[0-9a-fA-F]{2}"
        },
        {
          "name": "constant.character.escape.koto",
          "match": "\\\\u{[0-9a-fA-F]{1,6}}"
        }
      ]
    },
    "string-template": {
      "patterns": [
        {
          "name": "variable.parameter.koto",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "#all"
            }
          ]
        }
      ]
    },
    "string-raw": {
      "name": "string.quoted.raw.koto",
      "match": "r(#{0,255})(\"|').*?\\2\\1"
    },
    "id_with_type": {
      "patterns": [
        {
          "match": "([[:alpha:]_][[:alnum:]_]*)(:\\s*([[:alpha:]_][[:alnum:]_]*\\??))?",
          "captures": {
            "1": {
              "name": "variable.other.koto"
            },
            "3": {
              "name": "storage.type.koto"
            }
          }
        }
      ]
    },
    "let": {
      "patterns": [
        {
          "begin": "\\blet\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.koto"
            }
          },
          "end": "\\=",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.assignment.koto"
            }
          },
          "patterns": [
            {
              "include": "#id_with_type"
            }
          ]
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "begin": "\\|",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.start.koto"
            }
          },
          "end": "(\\|)(\\s*(->)\\s*([[:alpha:]_][[:alnum:]_]*\\??))?",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.arguments.end.koto"
            },
            "3": {
              "name": "keyword.operator.koto"
            },
            "4": {
              "name": "storage.type.koto"
            }
          },
          "patterns": [
            {
              "include": "#function_arguments"
            },
            {
              "include": "#return_type"
            }
          ]
        }
      ]
    },
    "function_arguments": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.begin.koto"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.end.koto"
            }
          },
          "patterns": [
            {
              "include": "#function_arguments"
            }
          ]
        },
        {
          "match": ",",
          "name": "punctuation.separator.parameters.koto"
        },
        {
          "include": "#id_with_type"
        }
      ]
    },
    "return_type": {
      "patterns": [
        {
          "match": "",
          "captures": {
            "1": {
              "name": "storage.type.koto"
            }
          }
        }
      ]
    }
  }
}